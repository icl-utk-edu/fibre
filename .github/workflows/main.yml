name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ 'master', 'gragghia*' ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    # Add an element in this strategy matrix for each FFT library we want to test
    strategy:
      matrix:
        library: [heffte, fftw, accfft, ffte, swfft, 2decomp]
        mpi: [openmpi, intel-oneapi-mpi]
      fail-fast: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Build with ${{ matrix.library }}
        run: |
          source /etc/profile
          shopt -s expand_aliases
          set +x
          export HOME=`pwd`
          git clone https://github.com/spack/spack spack_upstream || true
          source spack_upstream/share/spack/setup-env.sh
          module load gcc@7.3.0
          spack compiler find
          spack repo add `pwd`/spack/ || true
          cp .github/CI/spack.yaml .
          spack env activate -d .
          spack concretize
          spack uninstall -a -y --dependents ${{ matrix.library }} || true
          spack install
          #spack load
          # Now build fiber
          spack load --first gcc cmake cuda ${{ matrix.mpi }} fftw ${{ matrix.library }}
          mkdir build && cd build
          FFT_DIR=`spack location -i ${{ matrix.library }}`
          FFTW_DIR=`spack location -i fftw`
          export CPATH=$FFT_DIR/include:$FFTW_DIR/include
          export LIBRARY_PATH=$FFT_DIR/lib:$FFTW_DIR/lib
          MPI_DIR=`spack location -i ${{ matrix.mpi }}`
          LIBNAME=${{ matrix.library }}
          cmake -DFIBER_ENABLE_${LIBNAME^^}=ON -DMPI_DIR=$MPI_DIR ..
          make VERBOSE=1
          # Run the tests
          cd benchmarks
          mpirun -n 2 test3D_C2C -lib ${{ matrix.library }} -backend fftw -size 4 4 4 -pgrid 1 2 
        
